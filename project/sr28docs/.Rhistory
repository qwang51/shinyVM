summary(fit2)
# Intercept, mass and age are the most significant coefficients, plas is less significant
# and pedi is the least significant one
# Unit increase in:
# mass > 0.43217 increase in pres
# age > 0.29723 increase in pres
# plas > 0.03420 increase in pres
# preg > 0.30643 increase in pres
install.packages("kernlab")
install.packages("ROCR")
n <- 150 # number of data points
p <- 2 # dimension
sigma <- 1 # variance of the distribution
meanpos <- 0 # centre of the distribution of positive examples
meanneg <- 3 # centre of the distribution of negative examples
npos <- round(n/2) # number of positive examples
nneg <- n-npos # number of negative examples
# Generate the positive and negative examples
xpos <- matrix(rnorm(npos*p,mean=meanpos,sd=sigma),npos,p)
xneg <- matrix(rnorm(nneg*p,mean=meanneg,sd=sigma),npos,p)
x <- rbind(xpos,xneg)
# Generate the labels
y <- matrix(c(rep(1,npos),rep(-1,nneg)))
# Visualize the data
plot(x,col=ifelse(y>0,1,2))
legend("topleft",c('Positive','Negative'),col=seq(2),pch=1,text.col=seq(2))
#Now we split the data into a training set (80%) and a test set (20%):
## Prepare a training and a test set ##
ntrain <- round(n*0.8) # number of training examples
tindex <- sample(n,ntrain) # indices of training samples
xtrain <- x[tindex,]
xtest <- x[-tindex,]
ytrain <- y[tindex]
ytest <- y[-tindex]
istrain=rep(0,n)
istrain[tindex]=1
# Visualize
plot(x,col=ifelse(y>0,1,2),pch=ifelse(istrain==1,1,2))
legend("topleft",c('Positive Train','Positive Test','Negative Train','Negative Test'),
col=c(1,1,2,2),pch=c(1,2,1,2),text.col=c(1,1,2,2))
# load the kernlab package
library(kernlab)
# train the SVM
svp <- ksvm(xtrain,ytrain,type="C-svc",kernel='vanilladot',C=100,scaled=c())
# General summary
svp
# Attributes that you can access
attributes(svp)
# For example, the support vectors
alpha(svp) # alpha vector (possibly scaled)
# indices of support vectors in data matrix
#  after the possible effect of na.omit and subset
alphaindex(svp)
coef(svp) #The corresponding coefficients times the training labels
# Use the built-in function to pretty-plot the classifier
plot(svp,data=xtrain)
#              plot(scale(x), col=y+2, pch=y+2, xlab="", ylab="")
w <- colSums(coef(svp)[[1]] * x[unlist(alphaindex(svp)),])
b <- b(svp)
# Predict labels on test
ypred = predict(svp,xtest)
table(ytest,ypred)
# Compute accuracy
sum(ypred==ytest)/length(ytest)
# Compute at the prediction scores
ypredscore = predict(svp,xtest,type="decision")
#Practical session: Introduction to SVM in R
#Jean-Philippe Vert
#https://escience.rpi.edu/data/DA/svmbasic_notes.pdf
#install.packages("kernlab")
#install.packages("ROCR")
n <- 150 # number of data points
p <- 2 # dimension
sigma <- 1 # variance of the distribution
meanpos <- 0 # centre of the distribution of positive examples
meanneg <- 3 # centre of the distribution of negative examples
npos <- round(n/2) # number of positive examples
nneg <- n-npos # number of negative examples
# Generate the positive and negative examples
xpos <- matrix(rnorm(npos*p,mean=meanpos,sd=sigma),npos,p)
xneg <- matrix(rnorm(nneg*p,mean=meanneg,sd=sigma),npos,p)
x <- rbind(xpos,xneg)
# Generate the labels
y <- matrix(c(rep(1,npos),rep(-1,nneg)))
# Visualize the data
plot(x,col=ifelse(y>0,1,2))
legend("topleft",c('Positive','Negative'),col=seq(2),pch=1,text.col=seq(2))
#Now we split the data into a training set (80%) and a test set (20%):
## Prepare a training and a test set ##
ntrain <- round(n*0.8) # number of training examples
tindex <- sample(n,ntrain) # indices of training samples
xtrain <- x[tindex,]
xtest <- x[-tindex,]
ytrain <- y[tindex]
ytest <- y[-tindex]
istrain=rep(0,n)
istrain[tindex]=1
# Visualize
plot(x,col=ifelse(y>0,1,2),pch=ifelse(istrain==1,1,2))
legend("topleft",c('Positive Train','Positive Test','Negative Train','Negative Test'),
col=c(1,1,2,2),pch=c(1,2,1,2),text.col=c(1,1,2,2))
# load the kernlab package
library(kernlab)
# train the SVM
svp <- ksvm(xtrain,ytrain,type="C-svc",kernel='vanilladot',C=100,scaled=c())
# General summary
svp
# Attributes that you can access
attributes(svp)
# For example, the support vectors
alpha(svp) # alpha vector (possibly scaled)
# indices of support vectors in data matrix
#  after the possible effect of na.omit and subset
alphaindex(svp)
coef(svp) #The corresponding coefficients times the training labels
# Use the built-in function to pretty-plot the classifier
plot(svp,data=xtrain)
#              plot(scale(x), col=y+2, pch=y+2, xlab="", ylab="")
w <- colSums(coef(svp)[[1]] * x[unlist(alphaindex(svp)),])
b <- b(svp)
# Predict labels on test
ypred = predict(svp,xtest)
table(ytest,ypred)
# Compute accuracy
sum(ypred==ytest)/length(ytest)
# Compute at the prediction scores
ypredscore = predict(svp,xtest,type="decision")
?sample
table(ytest,ypred)
# Compute accuracy
table(ytest,ypred)
library (ggplot2)
library(foreign)
library (stats)
library (ggplot2)
library(foreign)
library (stats)
logisticPseudoR2s <- function(LogModel) {
dev <- LogModel$deviance
nullDev <- LogModel$null.deviance
modelN <-  length(LogModel$fitted.values)
R.l <-  1 -  dev / nullDev
R.cs <- 1- exp ( -(nullDev - dev) / modelN)
R.n <- R.cs / ( 1 - ( exp (-(nullDev / modelN))))
cat("Pseudo R^2 for logistic regression\n")
cat("Hosmer and Lemeshow R^2  ", round(R.l, 3), "\n")
cat("Cox and Snell R^2        ", round(R.cs, 3), "\n")
cat("Nagelkerke R^2           ", round(R.n, 3),    "\n")
}
diab <- read.arff("http://www.cs.usfca.edu/~pfrancislyon/uci-diabetes.arff")
summary(diab)
diab$plas <- ifelse(diab$plas==0,NA, diab$plas)
diab$pres <- ifelse(diab$pres==0,NA, diab$pres)
diab$skin <- ifelse(diab$skin==0,NA, diab$skin)
diab$insu <- ifelse(diab$insu==0,NA, diab$insu)
diab$mass <- ifelse(diab$mass==0,NA, diab$mass)
summary(diab)
diab2 <- diab
diab2$plas[is.na(diab2$plas)] <- mean(diab2$plas,na.rm=T)
diab2$pres[is.na(diab2$pres)] <- mean(diab2$pres,na.rm=T)
diab2$skin[is.na(diab2$skin)] <- mean(diab2$skin,na.rm=T)
diab2$insu[is.na(diab2$insu)] <- mean(diab2$insu,na.rm=T)
diab2$mass[is.na(diab2$mass)] <- mean(diab2$mass,na.rm=T)
summary(diab2)
library("psych")
d2_attrib <- diab2[,1:8]
library (useful)
hc1 <- hclust(dist(diab2[,1:8]))
plot(hc1)
hc2 <- hclust(dist(diab[,1:8]))
plot(hc2)
hc1 <- hclust(dist(diab2[,1:8]), method = "average")
# plot the dendrogram
plot(hc1)
hc2 <- hclust(dist(diab[,1:8]), method = "average")
plot(hc2)
install.packages('shiny')
library(shiny)
runExample('01_hello')
runApp('my_app')
library(shiny)
server <- function(input, output, session) { } #the server
ui <- basicPage("This is a real Shiny app") # the user interface
shinyApp(ui = ui, server = server)
setwd('~/Github/shinyVM/project/food')
data_dir <- "data"
setwd('~/Github/shinyVM/project/food')
data_dir <- "data"
sr28_tables <- list(
NUT_DATA = list(
title="Nutrient Data",
column_types=c(
food_id="text",
nutrient_id="text",	# Nutrient Descriptions table
nutrient_val = 'double',
nutrient_data_pts = 'double',
std_error = 'double',
src_code = 'text',
derivation_code = 'text',
ref_ndb_no = 'text',
add_nutr_mark = 'text',
num_studies = 'integer',
min = 'double',
max = 'double',
df = 'integer',
low_eb = 'double',
up_eb = 'double',
stat_cmt = 'text',
addMod_date = 'text',
CC = 'text'
),
sep="^"
),
WEIGHT = list(
title="Food Weights",
column_types=c(
food_id="text",
seq_num="text",
amount = 'double',
measure_desc = 'text',
gram_weight="double",
num_data_pts = 'integer', # number of data points
std_dev = 'double' # standard deviation
),
sep="^"
),
FOOD_DES = list(
title="Food Descriptions",
column_types=c(
food_id="text",
fdGrp_id = 'text',
long_food_desc="text",
short_food_desc="text",
common_name = 'text',
manufacture_name = 'text',
survey = 'character',
refuse_desc = 'integer', # Description of inedible parts of a food item (refuse),
# such as seeds or bone.
refuse = 'double',
scientific_name = 'text',
nitrogen2protein_factor = 'double',
cal2protein_factor = 'double',
cal2fat_factor = 'double',
cal2carb_factor = 'double'
),
sep="^"
),
NUTR_DEF = list(
title="Nutrient Definition",
column_types=c(
nutrient_id="text",
unit="text",
tagname="text",
nutrient_description="text",
decimals="integer",	# decimal places
sr_order = 'integer' # sort nutrient records in the same order as various reports produced from SR
),
sep="^"
),
FD_GROUP = list(
title = 'Food Group',
column_types=c(
fdGrp_id = 'text',
fdGrp_desc = 'text'
),
sep = "^"
)
)
# flat file to a data frame: call for each table
assign_data_frame <- function(tbl_name){
tbl <- read.table(
file.path(data_dir, paste0(tbl_name, ".txt")),
sep="^",
quote="~",
stringsAsFactors=FALSE)
names(tbl) <- names(sr28_tables[[tbl_name]][["column_types"]])
assign(tbl_name, tbl, envir = .GlobalEnv)
}
for (tbl in c("NUTR_DEF", "FOOD_DES", "WEIGHT", "NUT_DATA", "FD_GROUP"))
assign_data_frame(tbl)
NUTR_DEF$nutrient_description[5] <- 'Energy_kCal'
NUTR_DEF$nutrient_description[17] <- 'Energy_kJ'
library(sqldf)
library(tidyr)
library(dplyr)
long_food_nutrients <- sqldf("SELECT f.food_id, nd.nutrient_description, nv.nutrient_val
FROM FOOD_DES f
INNER JOIN NUT_DATA nv ON f.food_id = nv.food_id
INNER JOIN NUTR_DEF nd ON nv.nutrient_id = nd.nutrient_id")
food_group_desc <- sqldf("SELECT f.food_id, f.long_food_desc, fd.fdGrp_desc
FROM FOOD_DES f
INNER JOIN FD_GROUP fd ON f.fdGrp_id = fd.fdGrp_id")
nutrient_food_df <- spread(long_food_nutrients, food_id, nutrient_val, fill = 0)
food_nutrient_mat <- t(as.matrix(nutrient_food_df[-1]))
colnames(food_nutrient_mat) <- nutrient_food_df$nutrient_description
food_nutrient_df <- as.data.frame(food_nutrient_mat)
food_nutrient_df <- cbind(food_id = rownames(food_nutrient_df), food_nutrient_df)
rownames(food_nutrient_df) <- 1:nrow(food_nutrient_df)
food_group <- sqldf("SELECT f.food_id, f.long_food_desc AS food_desc, fd.fdGrp_desc AS food_group
FROM FOOD_DES f
INNER JOIN FD_GROUP fd ON f.fdGrp_id = fd.fdGrp_id")
# Final table
food_df <- sqldf("SELECT fn.*, fd.food_desc, fd.food_group
FROM food_nutrient_df fn
INNER JOIN food_group fd ON fn.food_id = fd.food_id")
omega_3 <- rowSums(food_df[,grep('n-3', names(food_df))])
omega_6 <- rowSums(food_df[,grep('n-6', names(food_df))])
food_df_1 <- data.frame(food_df, rowSums(food_df[,grep('n-3', names(food_df))]))
# Create sub_nutrients tables
Proximates <- c('food_id', 'food_desc', 'food_group',
'Protein', 'Adjusted Protein', 'Total lipid (fat)', 'Ash', 'Water',
'Carbohydrate, by difference', 'Fiber, total dietary',
'Sugars, total', 'Starch', 'Energy_kCal', 'Energy_kJ')
Minerals <- c('food_id', 'food_desc', 'food_group',
'Calcium, Ca', 'Iron, Fe', 'Magnesium, Mg', 'Phosphorus, P',
'Potassium, K', 'Sodium, Na', 'Zinc, Zn', 'Copper, Cu',
'Selenium, Se', 'Fluoride, F', 'Manganese, Mn')
Vitamins <- c('food_id', 'food_desc', 'food_group',
'Vitamin C, total ascorbic acid', 'Thiamin', 'Riboflavin',
'Niacin', 'Pantothenic acid', 'Vitamin B-6', 'Vitamin B-12',
'Vitamin B-12, added', 'Folate, total', 'Folate, DFE',
'Choline, total', 'Betaine', 'Vitamin A, RAE',
'Vitamin A, IU', 'Carotene, alpha', 'Carotene, beta',
'Vitamin E (alpha-tocopherol)', 'Vitamin D', 'Menaquinone-4',
'Dihydrophylloquinone', 'Vitamin K (phylloquinone)')
Lipid.Components <- c('food_id', 'food_desc', 'food_group')
Minerals <- c('food_id', 'food_desc', 'food_group')
proximates <- food_df[,Proximates]
minerals <- food_df[,Minerals]
vitamins <- food_df[,Vitamins]
lipid.components <- food_df[,Proximates]
# Save tables to .rds file
saveRDS(food_nutrient_df, file='~/GitHub/shinyVM/project/sample-apps/foodApp/data/food_nutrients.rds')
saveRDS(FOOD_DES, file='~/GitHub/shinyVM/project/sample-apps/foodApp/data/food_desc.rds')
saveRDS(food_group_desc, file='~/GitHub/shinyVM/project/sample-apps/foodApp/data/food_group_desc.rds')
omega_3
head(omega_3)
head(omega_6)
food_df_1 <- data.frame(food_df, omega_3, omega_6)
names(food_df_1)
food_df <- data.frame(food_df, omega_3, omega_6)
rm(food_df_1)
a <- food_df[,grep('n-6', names(food_df))
]
a
rm(a)
grep('n-6', names(food_df))
grep('n-3', names(food_df))
a <- food_df[,grep('n-6', names(food_df))]
head(a)
names(a)
a
grepl('n-3', names(food_df))
names(food_df)
food_df[,grep('n-3', names(food_df))]
omega_3 <- rowSums(food_df[,grep('n-3', names(food_df))])
omega_6 <- rowSums(food_df[,grep('n-6', names(food_df))])
food_df <- sqldf("SELECT fn.*, fd.food_desc, fd.food_group
FROM food_nutrient_df fn
INNER JOIN food_group fd ON fn.food_id = fd.food_id")
omega_3 <- rowSums(food_df[,grep('n-3', names(food_df))])
omega_6 <- rowSums(food_df[,grep('n-6', names(food_df))])
food_df <- data.frame(food_df, omega_3, omega_6)
omega_3 <- rowSums(food_df[,grep('n-3', names(food_df))])
omega_6 <- rowSums(food_df[,grep('n-6', names(food_df))])
food_df <- sqldf("SELECT fn.*, fd.food_desc, fd.food_group
FROM food_nutrient_df fn
INNER JOIN food_group fd ON fn.food_id = fd.food_id")
omega_3 <- rowSums(food_df[,grep('n-3', names(food_df))])
omega_6 <- rowSums(food_df[,grep('n-6', names(food_df))])
food_df <- data.frame(food_df, omega_3, omega_6)
rm(a)
grep(':', names(food_df))
View(food_df)
food_df <- sqldf("SELECT fn.*, fd.food_desc, fd.food_group
FROM food_nutrient_df fn
INNER JOIN food_group fd ON fn.food_id = fd.food_id")
View(food_df)
food_df$omega-3 <- omega_3
food_df$omega_3 <- omega_3
View(food_df)
names(food_df)
food_df$omega_6 <- omega_6
food_df <- sqldf("SELECT fn.*, fd.food_desc, fd.food_group
FROM food_nutrient_df fn
INNER JOIN food_group fd ON fn.food_id = fd.food_id")
food_df$omega_3 <- rowSums(food_df[,grep('n-3', names(food_df))])
food_df$omega_6 <- rowSums(food_df[,grep('n-6', names(food_df))])
grep('n-3', names(food_df))
View(food_df)
names(food_df)
View(NUTR_DEF)
Lipid.Components <- c('food_id', 'food_desc', 'food_group',
'omega_3', 'omega_6',
'Fatty acids, total monounsaturated', 'Fatty acids, total polyunsaturated',
'Fatty acids, total saturated', 'Fatty acids, total trans',
'Fatty acids, total trans-monoenoic', 'Fatty acids, total trans-polyenoic',
'Cholesterol', 'Phytosterols')
lipid.components <- food_df[,Lipid.Components]
View(lipid.components)
Amino.Acids <- c('food_id', 'food_desc', 'food_group',
'Tryptophan', 'Methionine', 'Cystine')
amino.acids <- food_df[,Amino.Acids]
View(amino.acids)
amino.acids[-3]
head(amino.acids[-1])
head(amino.acids[-1,-2])
head(amino.acids[-(1,2)])
head(amino.acids[-c(1,2)])
head(amino.acids[-c(1,2,3)])
c <- cbind(proximates, amino.acids)
head(c)
names(food_df)
Vitamins <- c('food_id', 'food_desc', 'food_group',
'Vitamin C, total ascorbic acid', 'Thiamin', 'Riboflavin',
'Niacin', 'Pantothenic acid', 'Vitamin B-6', 'Vitamin B-12',
'Vitamin B-12, added', 'Folate, total', 'Folate, DFE',
'Choline, total', 'Betaine', 'Vitamin A, RAE',
'Vitamin A, IU', 'Carotene, alpha', 'Carotene, beta',
'Vitamin E (alpha-tocopherol)', 'Vitamin E, added',
'Vitamin D', 'Vitamin D (D2 + D3)', 'Menaquinone-4',
'Dihydrophylloquinone', 'Vitamin K (phylloquinone)')
vitamins <- food_df[,Vitamins]
food <- cbind(proximates, minerals, vitamins, lipid.components, amino.acids)
View(food)
food <- cbind(proximates, minerals[-c(1,2,3)], vitamins[-c(1,2,3)],
lipid.components[-c(1,2,3)], amino.acids[-c(1,2,3)])
View(minerals)
minerals <- food_df[,Minerals]
Minerals <- c('food_id', 'food_desc', 'food_group',
'Calcium, Ca', 'Iron, Fe', 'Magnesium, Mg', 'Phosphorus, P',
'Potassium, K', 'Sodium, Na', 'Zinc, Zn', 'Copper, Cu',
'Selenium, Se', 'Fluoride, F', 'Manganese, Mn')
minerals <- food_df[,Minerals]
Proximates <- c('food_id', 'food_desc', 'food_group',
'Protein', 'Adjusted Protein', 'Total lipid (fat)', 'Ash', 'Water',
'Carbohydrate, by difference', 'Fiber, total dietary',
'Sugars, total', 'Starch', 'Energy_kCal', 'Energy_kJ')
Minerals <- c('food_id', 'food_desc', 'food_group',
'Calcium, Ca', 'Iron, Fe', 'Magnesium, Mg', 'Phosphorus, P',
'Potassium, K', 'Sodium, Na', 'Zinc, Zn', 'Copper, Cu',
'Selenium, Se', 'Fluoride, F', 'Manganese, Mn')
Vitamins <- c('food_id', 'food_desc', 'food_group',
'Vitamin C, total ascorbic acid', 'Thiamin', 'Riboflavin',
'Niacin', 'Pantothenic acid', 'Vitamin B-6', 'Vitamin B-12',
'Vitamin B-12, added', 'Folate, total', 'Folate, DFE',
'Choline, total', 'Betaine', 'Vitamin A, RAE',
'Vitamin A, IU', 'Carotene, alpha', 'Carotene, beta',
'Vitamin E (alpha-tocopherol)', 'Vitamin E, added',
'Vitamin D', 'Vitamin D (D2 + D3)', 'Menaquinone-4',
'Dihydrophylloquinone', 'Vitamin K (phylloquinone)')
Lipid.Components <- c('food_id', 'food_desc', 'food_group',
'omega_3', 'omega_6',
'Fatty acids, total monounsaturated', 'Fatty acids, total polyunsaturated',
'Fatty acids, total saturated', 'Fatty acids, total trans',
'Fatty acids, total trans-monoenoic', 'Fatty acids, total trans-polyenoic',
'Cholesterol', 'Phytosterols')
Amino.Acids <- c('food_id', 'food_desc', 'food_group',
'Tryptophan', 'Methionine', 'Cystine')
proximates <- food_df[,Proximates]
minerals <- food_df[,Minerals]
vitamins <- food_df[,Vitamins]
lipid.components <- food_df[,Lipid.Components]
amino.acids <- food_df[,Amino.Acids]
rm(c)
food <- cbind(proximates, minerals[-c(1,2,3)], vitamins[-c(1,2,3)],
lipid.components[-c(1,2,3)], amino.acids[-c(1,2,3)])
View(food)
View(vitamins)
c <- cbind(proximates, minerals, vitamins, lipid.components, amino.acids)
rm(c)
View(FOOD_DES)
View(WEIGHT)
proximates <- food_df[,Proximates]
minerals <- food_df[,Minerals]
vitamins <- food_df[,Vitamins]
lipid.components <- food_df[,Lipid.Components]
amino.acids <- food_df[,Amino.Acids]
foods <- cbind(proximates, minerals[-c(1,2,3)], vitamins[-c(1,2,3)],
lipid.components[-c(1,2,3)], amino.acids[-c(1,2,3)])
rm(food)
saveRDS(foods, file='~/GitHub/shinyVM/project/sample-apps/foodApp/data/foods.rds')
saveRDS(proximates, file='~/GitHub/shinyVM/project/sample-apps/foodApp/data/proximates.rds')
saveRDS(minerals, file='~/GitHub/shinyVM/project/sample-apps/foodApp/data/minerals.rds')
saveRDS(vitamins, file='~/GitHub/shinyVM/project/sample-apps/foodApp/data/vitamins.rds')
saveRDS(lipid.components, file='~/GitHub/shinyVM/project/sample-apps/foodApp/data/lipid.components.rds')
saveRDS(amino.acids, file='~/GitHub/shinyVM/project/sample-apps/foodApp/data/amino.acids.rds')
shiny::runApp('~/GitHub/shinyVM/project/sample-apps/foodApp')
shiny::runApp('~/GitHub/shinyVM/project/sample-apps/foodApp')
shiny::runApp('~/GitHub/shinyVM/project/sample-apps/foodApp')
shiny::runApp('~/GitHub/shinyVM/project/sample-apps/foodApp')
shiny::runApp('~/GitHub/shinyVM/project/sample-apps/foodApp')
shiny::runApp('~/GitHub/shinyVM/project/sample-apps/foodApp')
shiny::runApp('~/GitHub/shinyVM/project/sample-apps/NavBar')
shiny::runApp('~/GitHub/shinyVM/project/sample-apps/columns')
shiny::runApp('~/GitHub/shinyVM/project/sample-apps/columns')
shiny::runApp('~/GitHub/shinyVM/project/sample-apps/columns')
shiny::runApp('~/GitHub/shinyVM/project/sample-apps/columns')
shiny::runApp('~/GitHub/shinyVM/project/sample-apps/columns')
shiny::runApp('~/GitHub/shinyVM/project/sample-apps/columns')
shiny::runApp('~/GitHub/shinyVM/project/sample-apps/columns')
shiny::runApp('~/GitHub/shinyVM/project/sample-apps/columns')
shiny::runApp('~/GitHub/shinyVM/project/sample-apps/columns')
shiny::runApp('~/GitHub/shinyVM/project/sample-apps/columns')
shiny::runApp('~/GitHub/shinyVM/project/sample-apps/columns')
shiny::runApp('~/GitHub/shinyVM/project/sample-apps/columns')
shiny::runApp('~/GitHub/shinyVM/project/sample-apps/columns')
shiny::runApp('~/GitHub/shinyVM/project/sample-apps/columns')
shiny::runApp('~/GitHub/shinyVM/project/sample-apps/columns')
shiny::runApp('~/GitHub/shinyVM/project/sample-apps/columns')
shiny::runApp('~/GitHub/shinyVM/project/sample-apps/columns')
shiny::runApp('~/GitHub/shinyVM/project/sample-apps/columns')
